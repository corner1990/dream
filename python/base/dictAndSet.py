# dict
# Python 内置了地点，dict的支持，全称dictionary，其他语言中成为map.

# 1. 声明一个字典
d = {'a': 1, 'b': 2, 'c': 3};

# 查看字典
print(d); # {'a': 1, 'b': 2, 'c': 3}

# 查看字典中的某一个值, 如果key不存在，dict就会报错：
print(d['a']); # 1

# 要避免key不存在的错误，有两种办法，一是通过in判断key是否存在
print('H' in d)

# 二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value
print(d.get('H'))
# 指定自己的值
print(d.get('f', -1))

# 删除某一个key
d.pop('c')
print(d); # {'a': 1, 'b': 2}

# 注意，dict内部存放的顺序和key放入的顺序是没有关系的。
# 和list比较，dict有以下几个特点：

    # 查找和插入的速度极快，不会随着key的增加而增加；
    # 需要占用大量的内存，内存浪费多。
# 而list相反：

    # 查找和插入的时间随着元素的增加而增加；
    # 占用空间小，浪费内存很少。
# 所以，dict是用空间来换取时间的一种方法。
# dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，
# 正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。

# set
    # set和dict类似，也是一组key的集合，但不存储value。由于key不能重复

# 创建set， 要创建一个set，需要提供一个list作为输入集合
# 注意，传入的参数[1, 2, 3]是一个list，而显示的set([1, 2, 3])
# 只是告诉你这个set内部有1，2，3这3个元素，显示的[]不表示这是一个lis
s = set([1,2,3,4])
print(s); # {1, 2, 3, 4}

# 重复元素在set中自动被过滤
s1 = set ([1,2,3,4,5,6,5,4,3])
print(s1); # {1, 2, 3, 4, 5, 6}

# set 中添加元素
s1.add(7)
print(s1); # {1, 2, 3, 4, 5, 6, 7}

# set中删除元素
s1.remove(1);
print(s1); # {2, 3, 4, 5, 6, 7}

# set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，
# 所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，
# 也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。


