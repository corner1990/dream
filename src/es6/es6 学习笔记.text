es6 学习笔记

一。let
	ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。
	{let a=0;}
	1.for循环的计数器，就很合适使用let命令。
	2.let 有作用于的概念 ，不存在变量提升；
	3.暂时性死区 只要块级作用域内存在let 命令，它所声明的变量就"绑定"这个区域，不在受外部的影响；
	  注：ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错
	  你
	  在let命令声明变量tmp之前，都属于变量tmp的“死区”。
	  function bar(x = y, y = 2) {
		  return [x, y];
		}

		bar(); // 报错
		因为参数x默认值等于另一个参数y，而此时y还没有声明，属于”死区“。如果y的默认值是x，就不会报错，因为此时x已经声明了。

		function bar(x = 2, y = x) {
		  return [x, y];
		}
		bar(); // [2, 2]

	4.不允许重复声明
		let不允许在相同的作用域内，重复声明同一个变量。

二。块级作用域
	1.ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。
		第一种场景，内层变量可能会覆盖外层变量。
		var tmp = new Date();

		function f() {
		  console.log(tmp);
		  if (false) {
		    var tmp = "hello world";
		  }
		}
		f(); // undefined

		函数f执行后，输出结果为undefined，原因在于变量提升，导致内层的tmp变量覆盖了外层的tmp变量。


		第二种场景，用来计数的循环变量泄露为全局变量。
		var s = 'hello';

		for (var i = 0; i < s.length; i++) {
		  console.log(s[i]);
		}

		console.log(i); // 5

		变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。

	2.ES6的块级作用域

		let实际上为javaScript新增了块级作用域。
		function f1() {
		  let n = 5;
		  if (true) {
		    let n = 10;
		  }
		  console.log(n); // 5
		}

		函数有两个代码块，都声明了变量n，运行后输出5。这表示外层代码块不受内层代码块的影响。如果使用var定义变量n，最后输出的值就是10。


		ES6允许块级作用域的任意嵌套。

			{{{{{let insane = 'Hello World'}}}}};
			使用了一个五层的块级作用域。外层作用域无法读取内层作用域的变量


	3.块级作用域与函数声明
		函数能不能在块级作用域之中声明，是一个相当令人混淆的问题。

		// 函数声明语句
		{
		  let a = 'secret';
		  function f() {
		    return a;
		  }
		}

		// 函数表达式
		{
		  let a = 'secret';
		  let f = function () {
		    return a;
		  };
		}
	三。cost命令
		1.const声明一个只读的常量。一旦声明，常量的就不能改变了。
		const PI = 3.1415926;
		//PI 3.1415926

		PI = 3;
		会报错

		2.const一旦声明变量，就必须立即初始化，不能留到以后赋值。

		3.const的作用域与let命令相同：只在声明所在的块级作用域内有效。

		4.const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。

		5.const声明的常量，也与let一样不可重复声明。;

			const foo = {};
			foo.prop = 123;

			foo.prop
			// 123

			foo = {}; // TypeError: "foo" is read-only
		常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。

			const a = [];
			a.push('Hello'); // 可执行
			a.length = 0;    // 可执行
			a = ['Dave'];    // 报错

		常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错。

		注：如果真的想将对象冻结，应该使用Object.freeze方法

			onst foo = Object.freeze({});

			// 常规模式时，下面一行不起作用；
			// 严格模式时，该行会报错
			foo.prop = 123;
		常量foo指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。

		6.除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。

			var constantize = (obj) => {
			  Object.freeze(obj);
			  Object.keys(obj).forEach( (key, value) => {
			    if ( typeof obj[key] === 'object' ) {
			      constantize( obj[key] );
			    }
			  });
			};

		ES5只有两种声明变量的方法：var命令和function命令。ES6除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，ES6一共有6种声明变量的方法。

	四。顶层对象的属性

		在浏览器环境值得是window对象，在node指的是global对象，ES5中，顶层对象的属性与全局变量是等价的，
		顶层对象的属性复制与全局对象的赋值，是同一件事。
		window.a = 1 == a = 1;

		顶层对象的属性与全局变量挂钩，被认为是JavaScript语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。

		ES6为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性

		var a = 1;
		// 如果在Node的REPL环境，可以写成global.a
		// 或者采用通用方法，写成this.a
		window.a // 1

		let b = 1;
		window.b // undefined

		全局变量a由var命令声明，所以它是顶层对象的属性；全局变量b由let命令声明，所以它不是顶层对象的属性，返回undefined。

	五。顶层对象

		ES5的顶层对象，本身也是一个问题，因为它在各种实现里面是不统一的。

		浏览器里面，顶层对象是window，但Node和Web Worker没有window。
		浏览器和Web Worker里面，self也指向顶层对象，但是Node没有self。
		Node里面，顶层对象是global，但其他环境都不支持。
		同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。

		全局环境中，this会返回顶层对象。但是，Node模块和ES6模块中，this返回的是当前模块。
		函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。
		不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了CSP（Content Security Policy，内容安全政策），那么eval、new Function这些方法都可能无法使用。

		// 方法一
		(typeof window !== 'undefined'
		   ? window
		   : (typeof process === 'object' &&
		      typeof require === 'function' &&
		      typeof global === 'object')
		     ? global
		     : this);

		// 方法二
		var getGlobal = function () {
		  if (typeof self !== 'undefined') { return self; }
		  if (typeof window !== 'undefined') { return window; }
		  if (typeof global !== 'undefined') { return global; }
		  throw new Error('unable to locate global object');
		};

	在语言标准的层面，引入global作为顶层对象。也就是说，在所有环境下，global都是存在的，都可以从它拿到顶层对象。
	// CommonJS的写法
	require('system.global/shim')();

	// ES6模块的写法
	import shim from 'system.global/shim'; shim();
	上面代码可以保证各种环境里面，global对象都是存在的。

	// CommonJS的写法
	var global = require('system.global')();

	// ES6模块的写法
	import getGlobal from 'system.global';
	const global = getGlobal();
	上面代码可以保证各种环境里面，global对象都是存在的。



二、变量的解构赋值
	1.数组的解构赋值
		var [a,b,c] = [1,2,3];
		a.可以从数组中提取值，按照对应的位置，对变量赋值。

		b.这种写法属于'模式匹配'，只要等号两边的模式相同，左边的变量就会被赋予相对应的值。如果解构不成功，变量的值就等于undefined；
			let [foo, [[bar], baz]] = [1, [[2], 3]];
			foo // 1
			bar // 2
			baz // 3

			let [ , , third] = ["foo", "bar", "baz"];
			third // "baz"

			let [x, , y] = [1, 2, 3];
			x // 1
			y // 3

			let [head, ...tail] = [1, 2, 3, 4];
			head // 1
			tail // [2, 3, 4]

			let [x, y, ...z] = ['a'];
			x // "a"
			y // undefined
			z // []

		c.如果等好的右边不是数组或者类数组（所有不可被遍历的结构），那么就会报错。

		d.解构赋值不仅适用于var命令，也适用于let，const命令。
			// 报错
			let [foo] = 1;
			let [foo] = false;
			let [foo] = NaN;
			let [foo] = undefined;
			let [foo] = null;
			let [foo] = {};

		e.对于set结构，也可以使用数组的解构赋值。
			let [a,b,c] = new Set([1,2,1])

		f.解构赋值允许之类默认值。

			var [foo = 'hello'] = ['world'];
			注意，ES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。
			var [x = 1] = [undefined];
			x // 1

			var [x = 1] = [null];
			x // null

	2.对象的解构赋值

		a.解构不仅可以用于数组，还可以用于对象。
		b.对象的解构与数组有一个重要的不同，数组的元素是按次序排列的，变量的取值由他的位置决定；
		而对象的属性没有次序，变量必须与属性同名，才能取到正确的值
			var { baz } = { foo: "aaa", bar: "bbb" };
			baz // undefined

			var {foo,bar}={foo:{name:'leo',age:'20'},bar:{name:'joy',age:'18'}}

		c.如果变量名与属性名不一致，必须写成一下形式
			var {foo : baz} = {foo:{name:'leo',age:'20'},bar:{name:'joy',age:'18'}}

			let obj = {first:"hello",last:"world"};
			let {first: f,last:l} = obj;
			f // "hello" ; l // "world";

		d.对象的解构赋值是下面形式的简写

			var { foo: foo, bar: bar } = { foo: "aaa", bar: "bbb" };

		注意，采用这种写法时，变量的声明和赋值是一体的。对于let和const来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。
			let foo;
			let {foo} = {foo: 1}; // SyntaxError: Duplicate declaration "foo"

			let baz;
			let {bar: baz} = {bar: 1}; // SyntaxError: Duplicate declaration "baz"
		e.解构赋值的变量都会重新声明，所以报错了。不过，因为var命令允许重新声明，所以这个错误只会在使用let和const命令时出现。如果没有第二个let命令，上面的代码就不会报错。
			let foo;
			({foo} = {foo: 1}); // 成功

			let baz;
			({bar: baz} = {bar: 1}); // 成功

			let命令下面一行的圆括号是必须的，否则会报错。因为解析器会将起首的大括号，理解成一个代码块，而不是赋值语句。

		f.数组一样，解构也可以用于嵌套结构的对象。

			var obj = {
			  p: [
			    'Hello',
			    { y: 'World' }
			  ]
			};

			var { p: [x, { y }] } = obj;
			x // "Hello"
			y // "World"

			注意，这时p是模式，不是变量，因此不会被赋值。下面是嵌套赋值的例子。


				let obj = {};
				let arr = [];

				({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });

				obj // {prop:123}
				arr // [true]

		g.对象的解构也可以指定默认值。
			默认值生效的条件是，对象的属性值严格等于undefined。

			var {x = 3} = {};
			x // 3

			var {x, y = 5} = {x: 1};
			x // 1
			y // 5

			var {x:y = 3} = {};
			y // 3

			var {x:y = 3} = {x: 5};
			y // 5

			var { message: msg = 'Something went wrong' } = {};
			msg // "Something went wrong"

			因为JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免JavaScript将其解释为代码块，才能解决这个问题。
		k.由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。
			var arr =[1,2,3];
			var {0:first,[arr.length-1]:last} =arr;

	3.字符串解构
		a.字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。
			const [a,b,c,d,e] = 'hello';

		b.类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值
			let {length: len} = 'hello'; len //5

	4.数值和布尔值的解构赋值

		a.解构赋值是，如果等号左边的是数值和布尔值，则会先转为对象

		b.构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。

			let { prop: x } = undefined; // TypeError
			let { prop: y } = null; // TypeError


	5.函数的参数的解构赋值
		function add([x,y]){
			return x+y;
		}
		add([1,2]);






























学得比较晕，再次看commonjs，amd, cmd时好像还是没完全弄清楚，今天再整理一下： 
commonjs是用在服务器端的，同步的，如nodejs 
amd, cmd是用在浏览器端的，异步的，如requirejs和seajs 
其中，amd先提出，cmd是根据commonjs和amd基础上提出的。 
 


CommonJS 

CommonJs 是服务器端模块的规范，Node.js采用了这个规范。 

根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。 

例如： 
// foobar.js 

//私有变量 
var test = 123; 

//公有方法 
function foobar () { 

    this.foo = function () { 
        // do someing ... 
    } 
    this.bar = function () { 
        //do someing ... 
    } 
} 

//exports对象上的方法和变量是公有的 
var foobar = new foobar(); 
exports.foobar = foobar; 

//require方法默认读取js文件，所以可以省略js后缀 
var test = require('./boobar').foobar; 

test.bar(); 


CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作。像Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以CommonJS规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD  CMD 解决方案。 


AMD((Asynchromous Module Definition) 

AMD 是 RequireJS 在推广过程中对模块定义的规范化产出 

AMD异步加载模块。它的模块支持对象 函数 构造器 字符串 JSON等各种类型的模块。 

适用AMD规范适用define方法定义模块。 

//通过数组引入依赖 ，回调函数通过形参传入依赖 
define(['someModule1', ‘someModule2’], function (someModule1, someModule2) { 

    function foo () { 
        /// someing 
        someModule1.test(); 
    } 

    return {foo: foo} 
}); 
AMD规范允许输出模块兼容CommonJS规范，这时define方法如下： 

define(function (require, exports, module) { 
     
    var reqModule = require("./someModule"); 
    requModule.test(); 
     
    exports.asplode = function () { 
        //someing 
    } 
}); 



CMD 

CMD是SeaJS 在推广过程中对模块定义的规范化产出 

CMD和AMD的区别有以下几点： 

1.对于依赖的模块AMD是提前执行，CMD是延迟执行。不过RequireJS从2.0开始，也改成可以延迟执行（根据写法不同，处理方式不通过）。 

2.CMD推崇依赖就近，AMD推崇依赖前置。 
//AMD 
define(['./a','./b'], function (a, b) { 

    //依赖一开始就写好 
    a.test(); 
    b.test(); 
}); 

//CMD 
define(function (requie, exports, module) { 
     
    //依赖可以就近书写 
    var a = require('./a'); 
    a.test(); 
     
    ... 
    //软依赖 
    if (status) { 
     
        var b = requie('./b'); 
        b.test(); 
    } 
}); 
虽然 AMD也支持CMD写法，但依赖前置是官方文档的默认模块定义写法。 

3.AMD的api默认是一个当多个用，CMD严格的区分推崇职责单一。例如：AMD里require分全局的和局部的。CMD里面没有全局的 require,提供 seajs.use()来实现模块系统的加载启动。CMD里每个API都简单纯粹。 

SeaJS 和 RequireJS的主要区别 在此有解释















