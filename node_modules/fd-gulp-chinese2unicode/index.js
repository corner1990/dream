'use strict';

var through = require('through2');
var gutil = require('gulp-util');
var PluginError = gutil.PluginError;
var Path = require('path');
var fs = require('fs');
var File = gutil.File;
var Buffer = require('buffer').Buffer;
var jschardet = require('jschardet');
var iconv = require('iconv-lite');
var FLAG = 'STYLE_BUILD_ERR ';


module.exports = function (encoding) {

  var pluginName = 'fd-gulp-chinese2unicode';  
  var errorCache = [];

  if( typeof encoding !== 'string' || encoding.length === 0 ) {
    encoding = null;
  }

  function convert (file, env, callback) {
    var self = this;
    
    if (file.isNull()) {
      return callback(null, file);
    }

    if (file.isStream()) {
      return callback(new PluginError(pluginName, 'Streaming not supported'));
    }

    var filePath = file.path;
    var filebuffer = file.contents;

    var fileEncoding = encoding ? 
                        encoding :
                         jschardet.detect(filebuffer).encoding;

    if( !fileEncoding ) {
      return callback(null, file);
    }

    if( !iconv.encodingExists(fileEncoding) ) {
      gutil.log(gutil.colors.yellow('[WARN]'), 'file:', filePath, 'encoding is', gutil.colors.red(fileEncoding), 'but iconv-lite not support it!');
      return callback(null, file);
    }

    var fileStr = iconv.decode(filebuffer, fileEncoding);
    var decodeBuffer = iconv.encode(toUnicode(fileStr), fileEncoding);

    file.contents = decodeBuffer;

    return callback(null, file);
  }

  function toUnicode(s){ 
    return s.replace(/([\u4E00-\u9FA5]|[\uFE30-\uFFA0])/g, function(){
     return '\\u' + RegExp['$1'].charCodeAt(0).toString(16);
    });
  }

  return through.obj(convert);

};


