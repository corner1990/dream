'use strict';

var chinese2unicode = require('../');
var should = require('should');
var File = require('gulp-util').File;
var Buffer = require('buffer').Buffer;
var fs = require('fs');
var Readable = require('stream').Readable;
var Path = require('path');
var iconv = require('iconv-lite');

require('mocha');

describe('fd-gulp-chinese2unicode', function() {
  describe('chinese2unicode()', function() {

    it('should emit error for stream files', function(done) {

      var streamFile = {
          isNull: function () { return false; },
          isStream: function () { return true; }
        };

      var stream = chinese2unicode();

      stream.on('error', function (err) {
          err.message.should.equal('Streaming not supported');
          done();
        });

      stream.write(streamFile);
    });

  	it('should convert the chinese char in gbk file to unicode char', function(done) {
        var testDirectory = './source';
        var assets = Path.join(testDirectory, 'gbk.js');
        
        var stream = chinese2unicode();

        var fileAdata = fs.readFileSync(assets);

        var fileA = new File({
                path: assets,
                contents: fileAdata
            });

        var expectedContents = new Buffer("console.log('\\u6211\\u662fGBK\\u6587\\u4ef6');");

        stream.on('data', function(newFile){
            should.exist(newFile);
            should.exist(newFile.path);
            should.exist(newFile.relative);
            should.exist(newFile.contents);

            var newfileStr = iconv.decode(newFile.contents, 'GB2312');
            var expectedContentsStr = iconv.decode(expectedContents, 'GB2312')

            newfileStr.should.equal(expectedContentsStr);
            Buffer.isBuffer(newFile.contents).should.equal(true);
        });

        stream.on('end', function() {
        	done();
        });

        stream.write(fileA);

        stream.end();
    });

    it('should convert the chinese char in UTF-8 file to unicode char', function(done) {
        var testDirectory = './source';
        var assets = Path.join(testDirectory, 'utf.js');
        
        var stream = chinese2unicode();

        var fileAdata = fs.readFileSync(assets);

        var fileA = new File({
                path: assets,
                contents: fileAdata
            });

        var expectedContents = new Buffer("\\ufeffconsole.log('\\u6211\\u662futf8\\u6587\\u4ef6');");

        stream.on('data', function(newFile){
            should.exist(newFile);
            should.exist(newFile.path);
            should.exist(newFile.relative);
            should.exist(newFile.contents);

            var newfileStr = iconv.decode(newFile.contents, 'UTF-8');
            var expectedContentsStr = iconv.decode(expectedContents, 'UTF-8')

            newfileStr.should.equal(expectedContentsStr);
            Buffer.isBuffer(newFile.contents).should.equal(true);
        });

        stream.on('end', function() {
          done();
        });

        stream.write(fileA);

        stream.end();
    });
  });
});

function stringStream() {
	var stream = new Readable();

	stream._read = function() {
		this.push('terin');
		this.push(null);
	};

	return stream;
}